##############################################################
#
# This file includes all the test targets as well as all the
# non-default build rules and test recipes.
#
##############################################################

SRC_SUFFIX := .cpp
SRCDIR     := src/
OBJDIR     := obj/
DISTDIR    := dist/

CFG_GEN_PATH     = /home/binary/code/PathArmor/Triton
CFG_PATH         = $(CFG_GEN_PATH)/cfg
DISASM_UTIL_PATH = $(CFG_GEN_PATH)/disasm_util
LOADER_PATH      = $(CFG_GEN_PATH)/binary_loader
BOOST_PATH       = /home/linuxbrew/.linuxbrew/Cellar/boost/1.72.0_2
BOOST_INC_PATH   = $(BOOST_PATH)/include
BOOST_LIB_PATH   = $(BOOST_PATH)/lib

#TOOL_CXXFLAGS = $(TOOL_CXXFLAGS_NOOPT) -I$(BOOST_INC_PATH) -L$(BOOST_LIB_PATH) -Wno-unused-function
#TOOL_LIBS += -L$(BOOST_LIB_PATH) -lboost_serialization

##############################################################
#
# Test targets
#
##############################################################

###### Place all generic definitions here ######

# This defines tests which run tools of the same name.  This is simply for convenience to avoid
# defining the test name twice (once in TOOL_ROOTS and again in TEST_ROOTS).
# Tests defined here should not be defined in TOOL_ROOTS and TEST_ROOTS.
TEST_TOOL_ROOTS := track kernel_module

# This defines the tests to be run that were not already defined in TEST_TOOL_ROOTS.
TEST_ROOTS :=

# This defines the tools which will be run during the the tests, and were not already defined in
# TEST_TOOL_ROOTS.
TOOL_ROOTS := #$(BOOST_LIB_PATH)

# This defines the static analysis tools which will be run during the the tests. They should not
# be defined in TEST_TOOL_ROOTS. If a test with the same name exists, it should be defined in
# TEST_ROOTS.
# Note: Static analysis tools are in fact executables linked with the Pin Static Analysis Library.
# This library provides a subset of the Pin APIs which allows the tool to perform static analysis
# of an application or dll. Pin itself is not used when this tool runs.
SA_TOOL_ROOTS :=

# This defines all the applications that will be run during the tests.
APP_ROOTS :=

# This defines any additional object files that need to be compiled.
OBJECT_ROOTS := #$(CFG_PATH)/cfg.o

# This defines any additional dlls (shared objects), other than the pintools, that need to be compiled.
DLL_ROOTS := #$(BOOST_LIB_PATH)/libboost_serialization.so.1.72.0

# This defines any static libraries (archives), that need to be built.
LIB_ROOTS := $(DISASM_UTIL_PATH)/disasm_util.a $(LOADER_PATH)/loader.a

CXX_LPATH += -L$(BOOST_LIB_PATH)
CXX_LIBS  += -lboost_serialization

###### Define the sanity subset ######

# This defines the list of tests that should run in sanity. It should include all the tests listed in
# TEST_TOOL_ROOTS and TEST_ROOTS excluding only unstable tests.
SANITY_SUBSET := $(TEST_TOOL_ROOTS) $(TEST_ROOTS)


##############################################################
#
# Test recipes
#
##############################################################

# This section contains recipes for tests other than the default.
# See makefile.default.rules for the default test rules.
# All tests in this section should adhere to the naming convention: <testname>.test

##############################################################
#
# Build rules
#
##############################################################

# This section contains the build rules for all binaries that have special build rules.
# See makefile.default.rules for the default build rules.

###### Special tool's build rules ######

$(OBJDIR)kernel_module$(OBJ_SUFFIX): $(SRCDIR)kernel_module$(SRC_SUFFIX)
	$(CXX) $(TOOL_CXXFLAGS_NOOPT) -Wno-unused-function -std=c++11 \
	-I$(CFG_PATH) -I$(BOOST_INC_PATH) \
	$(COMP_OBJ)$@ $<

$(OBJDIR)kernel_module$(PINTOOL_SUFFIX): $(OBJDIR)kernel_module$(OBJ_SUFFIX)
	$(LINKER) $(TOOL_LDFLAGS_NOOPT) $(LINK_EXE)$@ $< $(TOOL_LPATHS) $(TOOL_LIBS)

$(OBJDIR)track$(OBJ_SUFFIX): $(SRCDIR)track$(SRC_SUFFIX)
	$(CXX) $(TOOL_CXXFLAGS_NOOPT) -std=c++11 \
	-I$(DISASM_UTIL_PATH) -I$(LOADER_PATH) \
	$(COMP_OBJ)$@ $<

$(OBJDIR)track$(PINTOOL_SUFFIX): $(OBJDIR)track$(OBJ_SUFFIX)
	$(LINKER) $(TOOL_LDFLAGS_NOOPT) $(LINK_EXE)$@ $< $(TOOL_LPATHS) $(TOOL_LIBS)

$(OBJDIR):
	mkdir -p $(OBJDIR)
